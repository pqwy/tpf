{0 Tpf — Tagless/Trivial polytypic functions}

Tpf is a simple and idiomatic library for datatype-generic programming in OCaml.

{1:api API}

Tpf core.

{!modules: Tpf}

Standard generic types and functions.

{!modules: Tpf_std}

{1:quick_start Quick start}

{2 Instantiating generic functions}

To make use of Tpf, you always need to combine a generic function with generic
{{!Tpf.data}data representation}.

Representations have an arity, which depends on the number of other types the type
in question contains. For instance, {!Tpf_std.list} is [('a, 'a list) data1].
Its arity is 1, as lists only contain one other type.

To instantiate a function over type [t], you need its {{!Tpf.data}[data]}, the
generic function {{!Tpf.Data}entry-point} of the
corresponding arity, and arity-many other functions to take
care of inner types.

This creates a printer for [int] lists:

{v
let pp_int_list : int list Fmt.t =
  Tpf_fmt.data1 Tpf_std.list Format.pp_print_int
v}

Pulling out the printer for contained type yields a polymorphic combinator:

{v
let pp_list : 'a Fmt.t -> 'a list Fmt.t =
  fun pp_v -> Tpf_fmt.data1 Tpf_std.list pp_v
v}

{!Tpf_std.result} is [('a, 'b, ('a, 'b) result) data2]:

{v
let pp_result : 'a Fmt.t -> ('a, string) result Fmt.t =
  fun pp_v -> Tpf_fmt.data2 Tpf_std.result pp_v Format.pp_print_string
v}

The basic idea is that — in the absence of type-based dispatch — the user has to
explicitly specify what happens when the generic function comes across other
types inside and has to cross the type boundary. This is done by simply
supplying the generic function with the functions to call at these types.

This is the mechanism that gives Tpf a flavour idiomatic to OCaml: as is usually
the case with type-based combinatory libraries, it is the user's responsibility
to parameterise higher-order functions corresponding to higher-kinded types.
There are no additional dispatch schemes involved.

{2 Equipping types with generic representation}

To use a generic function on a type, you need its {{!Tpf.data}data}.

This can be automated with [ppx_deriving_tpf]:

{v
type 'a t = | X
            | Y of string * 'a
  [@@deriving tpf]
v}

Otherwise, you need to construct a pair of functions of arity [n] and pack them
up in a {{!Tpf.data}[data[n]]} value.

{v
type 'a t = | X
            | Y of string * 'a

open Tpf

let cons_y string a = Y (string, a)

let m0 = variant 0 "X"
let m1 = variant 1 "Y"

let t: (string, 'a, 'a t) data2 =
  { view = (fun f_string f_a ->
      (function
       | X -> V.K X
       | Y (string, a) -> V.(A (A (K cons_y, string, f_string), a, f_a))),
      (function X -> m0 | Y _ -> m1))
  ; schema = fun f_string f_a ->
      [ S.K X, m0;
        S.(A (A (K cons_y, f_string), f_a)), m1 ]
  }
v}

Both functions encode values as an AST of (curried) constructor applications;
the {{! Tpf.view}view} function unpacks the value into a
{{! Tpf.V.spine}view spine}, while the {{! Tpf.schema}schema} function
constructs one {{! Tpf.S.spine}schema spine} for each constructor in the type.

Schematically,

{v
Y ("foo", 13)
v}

has the structure

{v
    @
   / \
  @  13
 / \
Y  "foo"
v}

so the individual value is encoded as the view spine

{v
A ─┬─ A ─┬─ K ─ (fun s n -> Y (s, n))
   │     ├─ "foo"
   │     ╰─ f_string
   ├─ 13
   ╰─ f_a
v}

while the type itself is encoded as schema spines

{v
K ─ X

A ─┬─ A ─┬─ K ─ (fun s n -> Y (s, n))
   │     ╰─ f_string
   ╰─ f_a
v}

Spines have a {{! Tpf.meta}meta block} attached, which provides additional meta
data about the constructor.

{2 Writing generic functions}

These come in two flavours: consumers and producers.

Iterators, for instance, are consumers. Consumers work on a
{{! Tpf.view}[view]}, and discover the structure of a single value by
traversing the {{! Tpf.V.spine}view spine}:

{v
open Tpf
module G = Tpf.Generic (struct type 'a q = 'a -> unit end)

let rec g_iter : ('a, G.p) view -> 'a -> unit =
  fun view x ->
    let rec go: 'a. ('a, _, _) V.spine -> unit =
      function
      | V.K _ -> ()
      | V.A (s, a, f_a) -> go s; G.(!:)f_a a
      | V.R (s, a) -> go s; g_iter view a
    in
    go (spine view x)
v}

While random generators are producers. Producers work on a
{{! Tpf.schema}[schema]}, and discover the structure of each possible
constructor by traversing the {{! Tpf.S.spine}schema spine}:

{v
let sample : 'a list -> 'a =
  fun xs -> List.(nth xs (length xs |> Random.int))

open Tpf
module G = Generic (struct type 'a q = unit -> 'a end)

let rec g_random : ('a, G.p) schema -> unit -> 'a =
  fun schema () ->
    let rec go: 'a. ('a, _, _) S.spine -> 'a =
      function
      | S.K f -> f
      | S.A (s, f_a) -> go s G.(!:f_a ())
      | S.R s -> go s (g_random schema ())
    in
    go (sample schema |> spine)
v}

A little complication arises from the fact that spines must be able to contain
any sort of function for the corresponding types. In other words, spines must
exhibit higher-kinded polymorphism.

We encode this using the {{: https://github.com/ocamllabs/higher}higher} trick.
This is why each generic function needs to instantiate {! Tpf.Generic}: it
provides the {{! Tpf.Generic.p}proxy type} for that particular function, and the
corresponding injection and projection.

The generic function itself will use projection, to fetch the inner {e query}
functions; and the caller will use injection, to pack them into spines.

To simplify usage, we can top off the definitions with

{v
include G.View (struct
  type 'a r = 'a -> unit
  let gfun = g_iter
end)
v}

or

{v
include G.Schema (struct
  type 'a r = unit -> 'a
  let gfun = g_random
end)
v}

which will create a family of {{!Tpf.data}[data[n]]} functions, like the ones we
have been using at the beginning:

{v
let iter_list : ('a -> unit) -> 'a list -> unit =
  fun i_v = data1 Tpf_std.list i_v
v}

{v
let random_result : (unit -> 'a) -> (unit -> 'e) -> unit -> ('a, 'e) result =
  fun r_a r_e -> data2 Tpf_std.result r_a r_e
v}
